<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, April 12, 2021, 3:48 PM -->
<!-- MuClient version 5.05 -->

<!-- Plugin "Secretpack" generated by Plugin Wizard -->

<muclient>
<plugin
   name="toastush"
   author="Erick Rosso"
   id="843d2f53cb3685465bda7d4a"
   language="Lua"
   date_written="2021-04-12 15:47:28"
   requires="5.05"
   version="1.0"
   save_state="y"
   >
 <description trim="y">

    Welcome to the Miriani MUSHclient soundpack: Toastush.

    To get started with configuring the soundpack, type: `toastush:config'
    To view information about the currently running script type: `toastush:info'
    To update plugins and download sound files type: `toastush:update'

    To view valid starmap filters type: `sm.help'
    To view valid scan filters type: `sc.help'

    To view this help type: `'toastush:help'

    Once in the game, tune a metaf frequency communicator to 0.07 for player support.
</description>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Plugin help  -->
<!-- Triggers -->
<triggers>

  <trigger
 enabled="y"
   script="OnMSP"
   name="MSP"
   match="^(!!SOUND\(.+\))$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
>
  </trigger>

  <trigger
   enabled="y"
   script="OnLink"
   name="http"
   match="((?:https?|ftp|telnet|rsync|mailto|gopher)://[[:graph:]]+[^&quot;])"
   regexp="y"
      send_to="12"
   keep_evaluating="y"
  >
  </trigger>

</triggers>

<aliases>
  <alias
   enabled="y"
   script="help"
   match="^toastush:help$"
   ignore_case="y"
   regexp="y"
  >
  </alias>

  <alias
   enabled="y"
   script="info"
   match="^toastush:info$"
   ignore_case="y"
   regexp="y"
  >
  </alias>

  <alias
   enabled="y"
   script="configure"
   match="^toastush:config(?:ure)?\s?(\w+)?$"
   ignore_case="y"
   regexp="y"
  >
  </alias>

</aliases>

<script>
<![CDATA[
require("json")
require(GetInfo(60).."miriani/include")

MSP, GMCP = 90, 201 
timeout, link = 120
script = 12
version, registry = GetPluginInfo(GetPluginID(), 19), "toastush"

-- Macros
AcceleratorTo ("F10", 'cycle_audio_groups()', script) -- cycle sounds
AcceleratorTo("ALT + F10", 'toggle_mute()', script)
AcceleratorTo("F11", 'decrease_attribute("vol")', script)
AcceleratorTo("F12", 'increase_attribute("vol")', script)

-- script routines
local options = require(GetInfo(60).."miriani/options")
function OnPluginInstall()
  assert(config:init_options(options) == 0)
end -- OnPluginInstall

function OnPluginSaveState()
  config:save()
end -- OnPluginSave

function OnPluginTelnetRequest (type, data)
  if data == "WILL" then
    if type == GMCP then
      notify("info", "Enabled GMCP")
            return true
    elseif  type == MSP then
      notify("info", "Enabled MSP")
      return true
    end -- if
  end -- if
end -- function OnPluginTelnetRequest

function OnPluginTelnetSubnegotiation (type, data)
   if type == GMCP then
    gmcp_handler(data)
  end -- if
end -- function OnPluginTelnetSubnegotiation

function OnPluginCommandEntered()
   if (not inMenu) and (searchingScan) then
     searchingScan = false
     scan = nil
    classFilter = nil
   end -- if scan
  if inMenu then
    inMenu = false
  end -- if inMenu
end -- OnPluginCommandEnter

function gmcp_handler(data)

  -- Below follows a typical GMCP implementation.
  -- End users may wish to modify behavior.

  core, params = string.match(data, "([%a.]+)%s+(.*)")
  local info = json.decode(params)

  if core == "communication.channel" then
    Channel(info.channel, info.message, {"channels"})
  elseif core == "communication.say" then
    Channel("say", info.message, {"conversation"})
  elseif core == "communication.tell" then
    Channel("tell", info.message, {"tell"})
  end -- if
end -- gmcp_handler

function OnMSP(name, line, wc)

  local text = wc[1]
  local info = {
  file = string.match(text, "!![%u]+%(([%a%d%p]+).*%)"),
  type = string.match(text, "!![%u]+%(.*T=([%a%d]+).*%)"),
  volume = string.match(text, "!![%u]+%(.*V=([%d]+).*%)"),
  loop = string.match(text, "!![%u]+%(.*L=([%d]+).*%)"),
  continue = string.match(text, "!![%u]+%(.*C=([%d]+).*%)"),
  url = string.match(text, "!![%u]+%(.*U=([%a%d%p]+).*%)")
  }
  msp_handler(info)
end -- OnMSP

function msp_handler(info)

  -- Below follows a typical MSP implementation.
  -- End users may wish to modify behavior.

  play(info.file, info.type)
end -- msp_handler

function plugin_update_url()
  local manifest = require(GetInfo(60).."miriani/plugin_manifest")
  return table.concat(manifest, ";")
end -- plugin_update_url

function plugin_update_aux_url()
  local manifest = require(GetInfo(60).."miriani/aux_manifest")
  return table.concat(manifest, ";")
end -- plugin_update_aux_url



]]>
</script> 


</muclient>
